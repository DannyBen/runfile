#---
# Global Definitions
# each Runfile may have a summary and a version. Both are optional.
#---

# title sets the title of the application (default: 'Runfile').
title "Runner"

# summary sets the one line description of the application.
summary "The first ever Runfile program"

# version will be displayed when --version is used (default: '0.0.0').
version "0.1.0"


#---
# each action must have an action block.
# if the action requires arguments, it also must have a 'usage' block.
# in addition, you may use the 'help' command, which descibes the 
# action and zero or more 'option' commands that set the format and 
# help text of option flags.
#---

# usage sets the one line usage pattern of this command.
# optional for commands without any arguments.
usage "greet <name> [--long --color]"

# help sets the short description of this command.
# longer lines will be automatically wrapped based on the width of 
# the terminal.
help "Say hello to <name>. Use --long to show a longer greeting, and this line is long on purpose to see how it is displayed."

# option sets the help text of --flags.
# the command accepts two parameters: the flag syntax and the help 
# text.
option "--long", "Show a longer greeting"
option "-c --color", "Use colored output"

# the third optional parameter can be used to specify a different 
# (additional) title that will appear above all options
option "--quiet", "Do not output anything", "Special Options"

# param adds a help text for a positional parameter under the Parameters 
# section.
param "SOURCE", "Source file to copy"

# the third optional parameter can be used to specify a different title, in
# a way similar to the 'option' command.
param "SOURCE", "Source file to copy", "Copy Options"

# env_vars adds a help text for specifying which environment variables can
# be set to influence the output.
env_var "HEADER", "Set the display header"

# the third optional parameter can be used to specify a different title.
env_var "HEADER", "Set the display header", "Layout Environment Variables"

# example adds an example command.
# the command accepts one parameter: the example command.
# you do not need to include "run" at the beginning of your example, it will 
# be added automatically.
example "greet Danny --color"

# action block defines what to do when this command is called
# the :symbol name should match the first string defined in the usage
# command. 
# the block recieves a single argument 'args' which includes all the
# arguments passed from the command line.
# you do not need to worry about parameters that do not exist - docopt
# already takes care of this (through our 'usage' patterns).
action :greet do |args|
  color = args['--color'] ? '!txtgrn!' : ""
  if args['--long'] 
    say "#{color}Hello #{args['<name>']}, welcome back"
  else 
    say "#{color}Hello #{args['<name>']}" 
  end
end

# the command 'command' defines a "super command" (namespace).
# any action below it will be preceded by it automatically.
command "jump"

# usage will be "jump around"
action :around do
  say "Jump around" 
end

# usage will be "jump up [--high]"
usage  "up [--high]"
action :up do |args|
  say "Jump up jump up " 
  say args['--high'] ? "\b..." : "and get down."
end

# the optional command 'endcommand' closes any 'command' block that 
# was opened. it can be used to create several namespaces in the same 
# Runfile.
endcommand
